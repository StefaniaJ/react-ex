{"version":3,"sources":["logo.svg","Profile.js","Header.js","AddPostForm.jsx","AddCommentForm.jsx","Comment.jsx","Post.jsx","Feed.jsx","Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Profile","props","name","age","Header","console","log","AddPostForm","type","value","AddCommentForm","Comment","author","comment","Post","useState","likes","className","message","comments","map","key","_id","Feed","posts","item","Footer","App","setPosts","useEffect","fetch","baseURL","method","headers","then","e","json","onClick","copy","concat","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sJAAAA,EAAOC,QAAU,IAA0B,kC,oHCE5B,SAASC,EAAQC,GAI9B,OACE,6BACE,6BACE,0CAAgBA,EAAMC,MACtB,mCAASD,EAAME,IAAf,iBCPO,SAASC,EAAOH,GAE7B,OADAI,QAAQC,IAAIL,GAEV,kDAEE,kBAACD,EAAD,CAASE,KAAMD,EAAMC,KAAMC,IAAKF,EAAME,OCN7B,SAASI,IACtB,OACE,8BACE,4CACA,2BAAOC,KAAK,SACZ,2BAAOA,KAAK,SAASC,MAAM,cCLlB,SAASC,IACtB,OAAO,iDCDM,SAASC,EAAQV,GAC9B,OACE,4BACGA,EAAMW,OADT,SACuBX,EAAMY,SCDlB,SAASC,EAAKb,GAAQ,IAAD,EACVc,mBAAS,GADC,mBAC7BC,EAD6B,UAKlC,OACE,6BAASC,UAAU,QACjB,4BAAKhB,EAAMW,QACX,2BAAIX,EAAMiB,SACV,6CAAmBF,EAAnB,WAIA,4BAAQC,UAAU,WAAWhB,EAAMe,MAAnC,WAGA,kBAACN,EAAD,MACA,4BACGT,EAAMkB,SAASC,KAAI,SAAAP,GAClB,OACE,kBAACF,EAAD,CACEU,IAAKR,EAAQS,IACbV,OAAQC,EAAQD,OAChBC,QAASA,EAAQA,eCvBhB,SAASU,EAAKtB,GAC3B,OACE,iCACE,kBAACM,EAAD,MAECN,EAAMuB,MAAMJ,KAAI,SAAAK,GACf,OACE,kBAACX,EAAD,CAEEO,IAAKI,EAAKH,IACVJ,QAASO,EAAKP,QACdN,OAAQa,EAAKb,OACbO,SAAUM,EAAKN,SACfH,MAAOS,EAAKT,YCfT,SAASU,EAAOzB,GAC7B,OACE,gCACE,2CAAiBA,EAAMC,OCkDdyB,MAhDf,WACE,IADa,EAIaZ,mBAAS,IAJtB,mBAINS,EAJM,KAICI,EAJD,KAqCb,OA1BAC,qBAAU,WAORC,MAAMC,gEAAsC,CAC1CC,OAAQ,MACRC,QAPc,CACd,eAAgB,kCAChB,WAAY,6BACZ,gBAAiB,cAMhBC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,UACZF,MAAK,SAAAC,GAAC,OAAIP,EAASO,QACrB,IAcD,yBAAKlB,UAAU,OACb,4BAAQoB,QAbZ,WAEE,IAAMC,EAAOd,EAAMe,OAAO,CACxB,CACErB,QAAS,eACTN,OAAQ,eAGZgB,EAASU,KAKP,kBAEA,kBAAClC,EAAD,CAAQF,KAxCC,OAwCWC,IAvCZ,KAwCR,kBAACoB,EAAD,CAAMC,MAAOA,IACb,kBAACE,EAAD,CAAQxB,KA1CC,WCIKsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,kB","file":"static/js/main.55d05857.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from \"react\";\r\n\r\nexport default function Profile(props) {\r\n  // const myname = \"Stefania\";\r\n  // const age = 22;\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <h1>My name is {props.name}</h1>\r\n        <h2>I'm {props.age} years old.</h2>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\n\r\nexport default function Header(props) {\r\n  console.log(props);\r\n  return (\r\n    <header>\r\n      I'm the header;\r\n      <Profile name={props.name} age={props.age} />\r\n    </header>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function AddPostForm() {\r\n  return (\r\n    <form>\r\n      <label>Add post:</label>\r\n      <input type=\"text\"></input>\r\n      <input type=\"submit\" value=\"Add post\"></input>\r\n    </form>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function AddCommentForm() {\r\n  return <button>Add a comment</button>;\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Comment(props) {\r\n  return (\r\n    <li>\r\n      {props.author} said {props.comment}\r\n    </li>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport AddCommentForm from \"./AddCommentForm\";\r\nimport Comment from \"./Comment\";\r\n\r\nexport default function Post(props) {\r\n  let [likes, setLikes] = useState(0);\r\n  function updateLikes() {\r\n    setLikes(likes + 1);\r\n  }\r\n  return (\r\n    <article className=\"post\">\r\n      <h2>{props.author}</h2>\r\n      <p>{props.message}</p>\r\n      <p>You've clicked {likes} times!</p>\r\n      {/* <button  className=\"likeBtn\" onClick={updateLikes}>\r\n        Likes\r\n      </button> */}\r\n      <button className=\"likeBtn\">{props.likes} Likes </button>\r\n      {/* <p>{props.likes} likes</p> */}\r\n\r\n      <AddCommentForm />\r\n      <ol>\r\n        {props.comments.map(comment => {\r\n          return (\r\n            <Comment\r\n              key={comment._id}\r\n              author={comment.author}\r\n              comment={comment.comment}\r\n            />\r\n          );\r\n        })}\r\n      </ol>\r\n    </article>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport AddPostForm from \"./AddPostForm\";\r\nimport Post from \"./Post\";\r\n\r\nexport default function Feed(props) {\r\n  return (\r\n    <section>\r\n      <AddPostForm />\r\n      {/* <Post /> */}\r\n      {props.posts.map(item => {\r\n        return (\r\n          <Post\r\n            // key={index}\r\n            key={item._id}\r\n            message={item.message}\r\n            author={item.author}\r\n            comments={item.comments}\r\n            likes={item.likes}\r\n          />\r\n        );\r\n      })}\r\n    </section>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Footer(props) {\r\n  return (\r\n    <footer>\r\n      <p>I'm a footer {props.name}</p>\r\n    </footer>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Header from \"./Header\";\nimport Feed from \"./Feed\";\nimport Footer from \"./Footer\";\n\nfunction App() {\n  const name = \"Stef\";\n  const age = 22; //Pass this to profile and footer\n  // const posts = [<Post />, <Post />]; // pass this to feed\n  const [posts, setPosts] = useState([\n    // {\n    //   message: \"very strange\",\n    //   author: \"Alin\"\n    // }\n  ]);\n\n  useEffect(() => {\n    const baseURL = \"https://frontend-d1d9.restdb.io/rest/\";\n    const headers = {\n      \"Content-Type\": \"application/json; charset=utf-8\",\n      \"x-apikey\": \"\t5d887445fd86cb75861e25f1\",\n      \"cache-control\": \"no-cache\"\n    };\n    fetch(baseURL + \"posts?fetchchildren=true\", {\n      method: \"get\",\n      headers: headers\n    })\n      .then(e => e.json())\n      .then(e => setPosts(e));\n  }, []);\n\n  function addPost() {\n    // const copy = posts.concat([<Post />]);\n    const copy = posts.concat([\n      {\n        message: \"very strange\",\n        author: \"everybody\"\n      }\n    ]);\n    setPosts(copy);\n  }\n\n  return (\n    <div className=\"App\">\n      <button onClick={addPost}>Add a new post</button>\n      {/* <Header username=\"Dannie\" hobby=\"CSS\" /> */}\n      <Header name={name} age={age} />\n      <Feed posts={posts} />\n      <Footer name={name} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}